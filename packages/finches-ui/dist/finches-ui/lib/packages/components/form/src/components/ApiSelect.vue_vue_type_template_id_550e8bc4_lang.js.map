{"version":3,"file":"ApiSelect.vue_vue_type_template_id_550e8bc4_lang.js","sources":["../../../../../../../../../components/form/src/components/ApiSelect.vue?vue&type=template&id=550e8bc4&lang.js"],"sourcesContent":["<!--\n * @Description: \n * @Author: 华松林\n * @Date: 2021-08-23 10:58:42\n * @LastEditors: 华松林\n * @LastEditTime: 2021-12-01 11:07:32\n * @FilePath: /finches-ui/packages/components/form/src/components/ApiSelect.vue\n-->\n<template>\n  <el-select v-model=\"state\" v-bind=\"attrs\" @change=\"handleChange\">\n    <el-option\n      v-for=\"item in getOptions\"\n      :key=\"item.value\"\n      :label=\"item.label\"\n      :value=\"item.value\"\n    />\n    <template v-for=\"item in Object.keys($slots)\" #[item]=\"data\">\n      <slot :name=\"item\" v-bind=\"data\"></slot>\n    </template>\n  </el-select>\n</template>\n<script lang=\"ts\">\nimport { computed, defineComponent, ref, unref, watchEffect, watch } from 'vue'\nimport { omit, get } from 'lodash-es'\nimport { propTypes } from '@finches-ui/utils/propTypes'\nimport { isFunction } from '@finches-ui/utils/is'\nimport { useRuleFormItem } from '../hooks/useFormItem'\nimport { useAttrs } from '../hooks/useAttrs'\nimport type { PropType } from 'vue'\n\nexport default defineComponent({\n  name: 'ApiSelect',\n  inheritAttrs: false,\n  props: {\n    // 除了以下 props 还可使用 element-plus 的 Select 属性\n    value: propTypes.oneOfType([\n      propTypes.object,\n      propTypes.number,\n      propTypes.string,\n      propTypes.array,\n    ]),\n    numberToString: propTypes.bool,\n    api: {\n      // eslint-disable-next-line no-undef\n      type: Function as PropType<(arg?: any) => Promise<any[]>>,\n      default: null,\n    },\n    // api params\n    params: {\n      // eslint-disable-next-line no-undef\n      type: Object as PropType<any>,\n      default: () => ({}),\n    },\n    resultField: propTypes.string.def(''),\n    labelField: propTypes.string.def('label'),\n    valueField: propTypes.string.def('value'),\n  },\n  emits: ['options-change', 'change'],\n  setup(props, { emit }) {\n    const options: any = ref([])\n    const loading = ref(false)\n    const isFirstLoad = ref(true)\n    const emitData = ref<any[]>([])\n    const attrs = useAttrs()\n\n    const [state] = useRuleFormItem(props, 'value', 'change', emitData)\n\n    const getOptions = computed(() => {\n      const { labelField, valueField, numberToString } = props\n\n      return unref(options).reduce((prev: any, next) => {\n        if (next) {\n          const value = next[valueField]\n          prev.push({\n            label: next[labelField],\n            value: numberToString ? `${value}` : value,\n            ...omit(next, [labelField, valueField]),\n          })\n        }\n        return prev\n      }, [])\n    })\n\n    watchEffect(() => {\n      !unref(loading) && fetch()\n    })\n\n    watch(\n      () => props.params,\n      () => {\n        !unref(isFirstLoad) && fetch()\n      },\n      { deep: true }\n    )\n\n    async function fetch() {\n      const api = props.api\n      if (!api || !isFunction(api)) return\n      options.value = []\n      try {\n        loading.value = true\n        const res = await api(props.params)\n        if (Array.isArray(res)) {\n          options.value = res\n          return\n        }\n        if (props.resultField) {\n          options.value = get(res, props.resultField) || []\n        }\n      } catch (error) {\n        console.warn(error)\n      } finally {\n        // loading.value = false\n      }\n    }\n\n    function emitChange() {\n      emit('options-change', unref(getOptions))\n    }\n\n    function handleChange(_, ...args) {\n      emitData.value = args\n    }\n\n    return {\n      getOptions,\n      emitChange,\n      state,\n      attrs,\n      handleChange,\n    }\n  },\n})\n</script>\n"],"names":["_createElementBlock","_createBlock"],"mappings":";;;;;;;;;;gBAiBsB;iEAAA;KAAe,cAAQ;yBAEvC;4BADFA,4EACS;gCADTC;;;;;;;;;;;;;;;;;;;;;;"}