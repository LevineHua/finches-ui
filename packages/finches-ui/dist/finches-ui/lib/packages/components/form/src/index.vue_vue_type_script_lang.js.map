{"version":3,"file":"index.vue_vue_type_script_lang.js","sources":["../../../../../../../../components/form/src/index.vue"],"sourcesContent":["<!--\n * @Description: \n * @Author: 华松林\n * @Date: 2021-08-11 16:59:37\n * @LastEditors: 华松林\n * @LastEditTime: 2021-12-01 16:49:54\n * @FilePath: /finches-ui/packages/components/form/src/index.vue\n-->\n<template>\n  <el-form ref=\"formElRef\" :model=\"formModel\" v-bind=\"getBindValue\">\n    <el-row v-bind=\"getRow\">\n      <template v-for=\"schema in getSchema\" :key=\"schema.field\">\n        <FormItem\n          :form-action-type=\"formActionType\"\n          :schema=\"schema\"\n          :form-props=\"getProps\"\n          :form-model=\"formModel\"\n          :set-form-model=\"setFormModel\"\n          :all-default-values=\"defaultValueRef\"\n        >\n          <template v-for=\"item in Object.keys($slots)\" #[item]=\"data\">\n            <slot :name=\"item\" v-bind=\"data\"></slot>\n          </template>\n        </FormItem>\n      </template>\n\n      <FormAction v-bind=\"{ ...getProps }\">\n        <template\n          v-for=\"item in ['resetBefore', 'submitBefore']\"\n          #[item]=\"data\"\n        >\n          <slot :name=\"item\" v-bind=\"data\"></slot>\n        </template>\n      </FormAction>\n    </el-row>\n  </el-form>\n</template>\n<script lang=\"ts\">\nimport {\n  computed,\n  defineComponent,\n  onMounted,\n  reactive,\n  ref,\n  unref,\n  watch,\n  nextTick,\n} from 'vue'\nimport { ElForm, ElRow } from 'element-plus'\nimport { deepMerge } from '@finches-ui/utils/index'\nimport { dateUtil } from '@finches-ui/utils/dateUtil'\nimport { dateItemType } from './helper'\nimport FormItem from './components/FormItem.vue'\nimport FormAction from './components/FormAction.vue'\nimport { useFormValues } from './hooks/useFormValues'\nimport { useFormEvents } from './hooks/useFormEvents'\nimport { useContext } from './hooks/useContext'\nimport { createFormContext } from './hooks/useFormContext'\nimport { basicProps } from './props'\nimport type moment from 'moment'\nimport type { FormSchema } from './types/form'\nimport type { Nullable } from '@finches-ui/utils/types'\nimport type { InjectionKey } from 'vue'\n\nexport default defineComponent({\n  name: 'CbForm',\n  components: { FormItem, FormAction, ElForm, ElRow },\n  props: basicProps,\n  emits: ['register', 'reset', 'submit'],\n  setup(props, { emit, attrs }) {\n    const key: InjectionKey<any> = Symbol()\n    const modalFn = useContext<any>(key)\n    const formElRef = ref(null)\n    const formModel = reactive({})\n    const propsRef = ref({})\n    // eslint-disable-next-line no-undef\n    const schemaRef = ref<Nullable<FormSchema[]>>(null)\n    const defaultValueRef = ref({})\n\n    const isInitedDefaultRef = ref(false)\n\n    const getProps = computed(() => {\n      return { ...props, ...unref(propsRef) }\n    })\n\n    const getRow = computed(() => {\n      const { baseRowStyle = {}, rowProps } = unref(getProps)\n      return {\n        style: baseRowStyle,\n        ...rowProps,\n      }\n    })\n\n    async function setProps(formProps) {\n      propsRef.value = deepMerge(unref(propsRef) || {}, formProps)\n    }\n\n    const getBindValue = computed(() => ({\n      ...attrs,\n      ...props,\n      ...unref(getProps),\n    }))\n\n    const getSchema = computed(() => {\n      const schemas = unref(schemaRef) || unref(getProps)?.schemas || []\n      for (const item of schemas) {\n        const schema: any = item\n        const { defaultValue, component } = schema\n        if (defaultValue && dateItemType.includes(component)) {\n          if (!Array.isArray(defaultValue)) {\n            schema.defaultValue = dateUtil(defaultValue)\n          } else {\n            const def: moment.Moment[] = []\n            defaultValue.forEach((item) => {\n              def.push(dateUtil(item))\n            })\n            schema.defaultValue = def\n          }\n        }\n      }\n      return schemas\n    })\n\n    const { handleFormValues, initDefault } = useFormValues({\n      defaultValueRef,\n      getSchema,\n      formModel,\n      getProps,\n    } as any)\n\n    const {\n      handleSubmit,\n      setFieldsValue,\n      validateFields,\n      resetFields,\n      validate,\n      clearValidate,\n      getAllFieldsValue,\n    } = useFormEvents({\n      emit,\n      getProps,\n      formModel,\n      getSchema,\n      defaultValueRef,\n      formElRef,\n      handleFormValues,\n    } as any)\n\n    createFormContext({\n      resetAction: resetFields,\n      submitAction: handleSubmit,\n    })\n\n    // watch(\n    //   () => unref(getProps).model,\n    //   () => {\n    //     const { model } = unref(getProps)\n    //     if (!model) return\n    //     setFieldsValue(model)\n    //   },\n    //   {\n    //     immediate: true,\n    //   }\n    // )\n\n    watch(\n      () => getSchema.value,\n      (schema) => {\n        nextTick(() => {\n          modalFn?.redoModalHeight?.()\n        })\n        if (unref(isInitedDefaultRef)) {\n          return\n        }\n        if (schema?.length) {\n          initDefault()\n          isInitedDefaultRef.value = true\n        }\n      }\n    )\n\n    function setFormModel(key: string, value: any) {\n      // console.log(key, value)\n\n      formModel[key] = value\n\n      // console.log(formModel)\n\n      const { validateTrigger } = unref(getBindValue) as any\n\n      if (!validateTrigger || validateTrigger === 'change') {\n        validateFields([key]).catch((_) => {})\n      }\n    }\n\n    const formActionType = {\n      setProps,\n      setFieldsValue,\n      validate,\n      clearValidate,\n      submit: handleSubmit,\n      getAllFieldsValue,\n    }\n\n    onMounted(() => {\n      initDefault()\n      // console.log(formModel)\n      // console.log(formElRef)\n\n      emit('register', formActionType)\n    })\n    return {\n      getProps,\n      getSchema,\n      formElRef,\n      formModel,\n      getBindValue,\n      setFormModel,\n      defaultValueRef,\n      handleSubmit,\n      getRow,\n      formActionType,\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","FormItem","FormAction","ElForm","ElRow","basicProps","useContext","ref","reactive","computed","unref","deepMerge","dateItemType","dateUtil","useFormValues","useFormEvents"],"mappings":";;;;;;;;;;;;;;;;;;;;;AAgEA,aAAeA,oBAAgB;AAAA,EAC7B,MAAM;AAAA,EACN,YAAY,YAAEC,0DAAUC,wDAAYC,qBAAQC;AAAA,EAC5C,OAAOC;AAAA,EACP,OAAO,CAAC,YAAY,SAAS;AAAA,EAC7B,MAAM,OAAO,EAAE,MAAM,SAAS;AAC5B,UAAM,MAAyB;AAC/B,UAAM,UAAUC,sBAAgB;AAChC,UAAM,YAAYC,QAAI;AACtB,UAAM,YAAYC,aAAS;AAC3B,UAAM,WAAWD,QAAI;AAErB,UAAM,YAAYA,QAA4B;AAC9C,UAAM,kBAAkBA,QAAI;AAE5B,UAAM,qBAAqBA,QAAI;AAE/B,UAAM,WAAWE,aAAS,MAAM;AAC9B,aAAO,KAAK,UAAUC,UAAM;AAAA;AAG9B,UAAM,SAASD,aAAS,MAAM;AAC5B,YAAM,EAAE,eAAe,IAAI,aAAaC,UAAM;AAC9C,aAAO;AAAA,QACL,OAAO;AAAA,WACJ;AAAA;AAAA;AAIP,4BAAwB,WAAW;AACjC,eAAS,QAAQC,kBAAUD,UAAM,aAAa,IAAI;AAAA;AAGpD,UAAM,eAAeD,aAAS;AAAO,SAChC;AAAA,SACA;AAAA,SACAC,UAAM;AAAA;AAGX,UAAM,YAAYD,aAAS,MAAM;;AAC/B,YAAM,UAAUC,UAAM,+BAAoB,cAAN,mBAAiB,YAAW;AAChE,iBAAW,QAAQ,SAAS;AAC1B,cAAM,SAAc;AACpB,cAAM,EAAE,cAAc,cAAc;AACpC,YAAI,gBAAgBE,oBAAa,SAAS,YAAY;AACpD,cAAI,CAAC,MAAM,QAAQ,eAAe;AAChC,mBAAO,eAAeC,kBAAS;AAAA,iBAC1B;AACL,kBAAM,MAAuB;AAC7B,yBAAa,QAAQ,CAAC,UAAS;AAC7B,kBAAI,KAAKA,kBAAS;AAAA;AAEpB,mBAAO,eAAe;AAAA;AAAA;AAAA;AAI5B,aAAO;AAAA;AAGT,UAAM,EAAE,kBAAkB,gBAAgBC,4BAAc;AAAA,MACtD;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAGF,UAAM;AAAA,MACJ;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,QACEC,4BAAc;AAAA,MAChB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAGF,qCAAkB;AAAA,MAChB,aAAa;AAAA,MACb,cAAc;AAAA;AAehB,cACE,MAAM,UAAU,OAChB,CAAC,WAAW;AACV,mBAAS,MAAM;;AACb,iDAAS,oBAAT;AAAA;AAEF,UAAIL,UAAM,qBAAqB;AAC7B;AAAA;AAEF,UAAI,iCAAQ,QAAQ;AAClB;AACA,2BAAmB,QAAQ;AAAA;AAAA;AAKjC,0BAAsB,MAAa,OAAY;AAG7C,gBAAU,QAAO;AAIjB,YAAM,EAAE,oBAAoBA,UAAM;AAElC,UAAI,CAAC,mBAAmB,oBAAoB,UAAU;AACpD,uBAAe,CAAC,OAAM,MAAM,CAAC,MAAM;AAAA;AAAA;AAAA;AAIvC,UAAM,iBAAiB;AAAA,MACrB;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA,QAAQ;AAAA,MACR;AAAA;AAGF,kBAAU,MAAM;AACd;AAIA,WAAK,YAAY;AAAA;AAEnB,WAAO;AAAA,MACL;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA,MACA;AAAA;AAAA;AAAA;;;;"}