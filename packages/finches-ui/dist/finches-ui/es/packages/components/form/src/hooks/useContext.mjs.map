{"version":3,"file":"useContext.mjs","sources":["../../../../../../../../../components/form/src/hooks/useContext.ts"],"sourcesContent":["/*\n * @Description:\n * @Author: 华松林\n * @Date: 2021-08-16 10:55:19\n * @LastEditors: 华松林\n * @LastEditTime: 2021-11-30 17:15:54\n * @FilePath: /finches-ui/packages/components/form/src/hooks/useContext.ts\n */\nimport { inject, reactive, readonly as defineReadonly, provide } from 'vue'\nimport type { InjectionKey, UnwrapRef } from 'vue'\n\nexport interface CreateContextOptions {\n  readonly?: boolean\n  createProvider?: boolean\n  native?: boolean\n}\n\ntype ShallowUnwrap<T> = {\n  [P in keyof T]: UnwrapRef<T[P]>\n}\n\nexport function createContext<T>(\n  context: any,\n  key: InjectionKey<T> = Symbol(),\n  options: CreateContextOptions = {}\n) {\n  const { readonly = true, createProvider = false, native = false } = options\n\n  const state = reactive(context)\n  const provideData = readonly ? defineReadonly(state) : state\n  !createProvider && provide(key, native ? context : provideData)\n\n  return {\n    state,\n  }\n}\n\nexport function useContext<T>(key: InjectionKey<T>, native?: boolean): T\n// eslint-disable-next-line no-redeclare\nexport function useContext<T>(\n  key: InjectionKey<T>,\n  defaultValue?: any,\n  native?: boolean\n): T\n\n// eslint-disable-next-line no-redeclare\nexport function useContext<T>(\n  key: InjectionKey<T> = Symbol(),\n  defaultValue?: any\n): ShallowUnwrap<T> {\n  return inject(key, defaultValue || {})\n}\n"],"names":["readonly","defineReadonly"],"mappings":";;uBAsBE,SACA,MAAuB,UACvB,UAAgC,IAChC;AACA,QAAM,YAAEA,aAAW,MAAM,iBAAiB,OAAO,SAAS,UAAU;AAEpE,QAAM,QAAQ,SAAS;AACvB,QAAM,cAAcA,aAAWC,SAAe,SAAS;AACvD,GAAC,kBAAkB,QAAQ,KAAK,SAAS,UAAU;AAEnD,SAAO;AAAA,IACL;AAAA;AAAA;oBAcF,MAAuB,UACvB,cACkB;AAClB,SAAO,OAAO,KAAK,gBAAgB;AAAA;;;;"}