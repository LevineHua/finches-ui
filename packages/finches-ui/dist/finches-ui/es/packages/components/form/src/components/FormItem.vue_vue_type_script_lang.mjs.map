{"version":3,"file":"FormItem.vue_vue_type_script_lang.mjs","sources":["../../../../../../../../../components/form/src/components/FormItem.vue"],"sourcesContent":["<!--\n * @Description: \n * @Author: 华松林\n * @Date: 2021-08-12 15:14:22\n * @LastEditors: 华松林\n * @LastEditTime: 2021-12-01 11:29:09\n * @FilePath: /finches-ui/packages/components/form/src/components/FormItem.vue\n-->\n<script lang=\"tsx\">\nimport { computed, defineComponent, toRefs, unref } from 'vue'\nimport { ElCol, ElFormItem } from 'element-plus'\nimport { cloneDeep, upperFirst } from 'lodash-es'\nimport { isArray, isFunction, isBoolean, isNull } from '@finches-ui/utils/is'\nimport { getSlot } from '@finches-ui/utils/helper/tsxHelper.tsx'\nimport { componentMap } from '../componentMap'\n\nimport {\n  handleFormItemValue,\n  createPlaceholderMessage,\n  setComponentRuleType,\n} from '../helper'\nimport { useItemLabWidth } from '../hooks/useLabelWidth'\n\nexport default defineComponent({\n  name: 'BasicFormItem',\n  inheritAttrs: false,\n  props: {\n    schema: {\n      type: Object,\n      default: () => ({}),\n    },\n    formProps: {\n      type: Object,\n      default: () => ({}),\n    },\n    allDefaultValues: {\n      type: Object,\n      default: () => ({}),\n    },\n    formModel: {\n      type: Object,\n      default: () => ({}),\n    },\n    setFormModel: {\n      type: Function,\n      default: null,\n    },\n    formActionType: {\n      type: Object,\n    },\n  },\n  setup(props, { slots }) {\n    const { schema, formProps } = toRefs(props)\n\n    const itemLabelWidthProp = useItemLabWidth(schema, formProps)\n\n    const getValues = computed(() => {\n      const { schema, formModel, allDefaultValues } = props\n      return {\n        field: schema.field,\n        schema,\n        model: formModel,\n        values: {\n          ...formModel,\n          ...allDefaultValues,\n        },\n      }\n    })\n\n    const getComponentsProps = computed(() => {\n      const { schema, formModel } = props\n      const { componentProps = {} } = schema\n      if (!isFunction(componentProps)) {\n        return componentProps\n      }\n      return componentProps({ schema, formModel }) ?? {}\n    })\n\n    function getShow() {\n      const { show, ifShow } = props.schema\n      let isShow = true\n      let isIfShow = true\n      if (isBoolean(show)) {\n        isShow = show\n      }\n      if (isBoolean(ifShow)) {\n        isIfShow = ifShow\n      }\n      if (isFunction(show)) {\n        isShow = show(unref(getValues))\n      }\n      if (isFunction(ifShow)) {\n        isIfShow = ifShow(unref(getValues))\n      }\n      return { isShow, isIfShow }\n    }\n\n    function handleRules() {\n      const {\n        rules: defRules = [],\n        component,\n        rulesMessageJoinLabel,\n        label,\n        dynamicRules,\n        required,\n      } = props.schema\n\n      if (isFunction(dynamicRules)) {\n        return dynamicRules(unref(getValues))\n      }\n\n      let rules = cloneDeep(defRules)\n      const { rulesMessageJoinLabel: globalRulesMessageJoinLabel = '' } =\n        props.formProps\n\n      const joinLabel = Reflect.has(props.schema, 'rulesMessageJoinLabel')\n        ? rulesMessageJoinLabel\n        : globalRulesMessageJoinLabel\n      const defaultMsg = `${createPlaceholderMessage(component)}${\n        joinLabel ? '' : label\n      }`\n\n      function validator(rule, value) {\n        const msg = rule.message || defaultMsg\n        if (value === undefined || isNull(value)) {\n          // 空值\n          return Promise.reject(msg)\n        } else if (Array.isArray(value) && value.length === 0) {\n          // 数组类型\n          return Promise.reject(msg)\n        } else if (typeof value === 'string' && value.trim() === '') {\n          // 空字符串\n          return Promise.reject(msg)\n        } else if (\n          typeof value === 'object' &&\n          Reflect.has(value, 'checked') &&\n          Reflect.has(value, 'halfChecked') &&\n          Array.isArray(value.checked) &&\n          Array.isArray(value.halfChecked) &&\n          value.checked.length === 0 &&\n          value.halfChecked.length === 0\n        ) {\n          // 非关联选择的tree组件\n          return Promise.reject(msg)\n        }\n        return Promise.resolve()\n      }\n\n      const getRequired = isFunction(required)\n        ? required(unref(getValues))\n        : required\n\n      if ((!rules || rules.length === 0) && getRequired) {\n        rules = [{ required: getRequired, validator }]\n      }\n\n      const requiredRuleIndex = rules.findIndex(\n        (rule) =>\n          Reflect.has(rule, 'required') && !Reflect.has(rule, 'validator')\n      )\n\n      if (requiredRuleIndex !== -1) {\n        const rule = rules[requiredRuleIndex]\n        const { isShow } = getShow()\n        if (!isShow) {\n          rule.required = false\n        }\n        if (component) {\n          if (!Reflect.has(rule, 'type')) {\n            rule.type = component === 'InputNumber' ? 'number' : 'string'\n          }\n\n          rule.message = rule.message || defaultMsg\n\n          if (component.includes('Input') || component.includes('Textarea')) {\n            rule.whitespace = true\n          }\n          const valueFormat = unref(getComponentsProps)?.valueFormat\n          setComponentRuleType(rule, component, valueFormat)\n        }\n      }\n      // 最大输入长度规则检查\n      const characterInx = rules.findIndex((val) => val.max)\n      if (characterInx !== -1 && !rules[characterInx].validator) {\n        rules[characterInx].message =\n          rules[characterInx].message ||\n          `字符数应小于${rules[characterInx].max}位`\n      }\n\n      return rules\n    }\n\n    // 在组件表中读取对应组件\n    function renderComponent() {\n      const { component, field, changeEvent = 'change' } = props.schema\n\n      const isCheck = component && ['Checkbox'].includes(component)\n\n      let eventKey = `on${upperFirst(changeEvent)}`\n\n      // 如果是 Input 组件，则将默认事件替换未 onInput 事件\n      if (['Input', 'Slider'].includes(component)) {\n        eventKey = 'onInput'\n      }\n\n      const on = {\n        [eventKey]: (...args) => {\n          const [e] = args\n          if (propsData[eventKey]) {\n            propsData[eventKey](...args)\n          }\n          const target = e ? e.target : null\n          const value = target ? (isCheck ? target.checked : target.value) : e\n          // console.log(field, value)\n          props.setFormModel(field, value)\n        },\n      }\n\n      const Comp = componentMap.get(component)\n      // console.log(Comp)\n      let propsData = {\n        ...unref(getComponentsProps),\n      }\n      if (!['ColorPicker'].includes(component)) {\n        propsData = Object.assign(propsData, { clearable: true })\n      }\n      // propsData.codeField = field\n      // propsData.formValues = unref(getValues)\n\n      // console.log(propsData)\n\n      const bindValue = {\n        [isCheck ? 'checked' : 'model-value']: handleFormItemValue(\n          props.schema,\n          props.formModel[field]\n        ),\n      }\n\n      // console.log(bindValue)\n\n      const compAttr = {\n        ...propsData,\n        ...on,\n        ...bindValue,\n      }\n\n      // 如果组件是 RadioGroup，并且参数中包含 options 属性，则需要生成子组件 Radio\n      if (\n        ['RadioGroup', 'CheckboxGroup', 'Select'].includes(component) &&\n        component &&\n        propsData.options &&\n        isArray(propsData.options)\n      ) {\n        const options = propsData.options\n        const getContent = (component, options) => {\n          return renderGroup(component, options)\n        }\n        return <Comp {...compAttr}>{getContent(component, options)}</Comp>\n      }\n\n      return <Comp {...compAttr}></Comp>\n    }\n\n    // 生成 RadioGroup/CheckboxGroup 的子组件\n    function renderGroup(component, options) {\n      if (component === 'Select') {\n        const CompItem = componentMap.get('Option')\n        return options.map((val) => {\n          return (\n            <CompItem\n              label={val.label}\n              key={val.value}\n              value={val.value}\n            ></CompItem>\n          )\n        })\n      } else {\n        const componentName = component.replace(/w*Group$/, '')\n        const CompItem = componentMap.get(componentName)\n        const CompList = options.map((val) => {\n          return <CompItem label={val.value}>{val.label}</CompItem>\n        })\n        return CompList\n      }\n    }\n\n    // 生成 formItem 组件\n    function renderItem() {\n      const { field, label, itemProps, slot } = props.schema\n      const { labelCol, wrapperCol } = unref(itemLabelWidthProp)\n\n      const getContent = () => {\n        return slot ? getSlot(slots, slot, unref(getValues)) : renderComponent()\n      }\n\n      return (\n        <ElFormItem\n          prop={field}\n          label={label}\n          {...itemProps}\n          {...wrapperCol}\n          labelWidth={labelCol}\n          rules={handleRules()}\n        >\n          <div style=\"display: flex;height: 100%;align-items: center;\">\n            <div style=\"flex: 1\">{getContent()}</div>\n          </div>\n        </ElFormItem>\n      )\n    }\n\n    return () => {\n      const { component, colProps = {} } = props.schema\n      if (!componentMap.has(component)) {\n        return null\n      }\n\n      const { baseColProps = {} } = props.formProps\n      const realColProps = { ...baseColProps, ...colProps }\n      // console.log(props.schema)\n      // const value = unref(getValues)\n      const { isIfShow, isShow } = getShow()\n\n      const getContent = () => {\n        return renderItem()\n      }\n\n      // console.log(getContent())\n\n      return (\n        isIfShow && (\n          <ElCol {...realColProps} v-show={isShow}>\n            {getContent()}\n          </ElCol>\n        )\n      )\n    }\n  },\n})\n</script>\n"],"names":[],"mappings":"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"}