{"version":3,"file":"FormItem.vue_vue_type_script_lang.mjs","sources":["../../../../../../../../../components/form/src/components/FormItem.vue"],"sourcesContent":["<!--\n * @Description: \n * @Author: 华松林\n * @Date: 2021-08-12 15:14:22\n * @LastEditors: 华松林\n * @LastEditTime: 2021-12-01 15:50:08\n * @FilePath: /finches-ui/packages/components/form/src/components/FormItem.vue\n-->\n<script lang=\"tsx\">\nimport { computed, defineComponent, toRefs, unref, h } from 'vue'\nimport { ElCol, ElFormItem } from 'element-plus'\nimport { cloneDeep, upperFirst } from 'lodash-es'\nimport { isArray, isFunction, isBoolean, isNull } from '@finches-ui/utils/is'\nimport { getSlot } from '@finches-ui/utils/helper/tsxHelper.tsx'\nimport { componentMap } from '../componentMap'\n\nimport {\n  handleFormItemValue,\n  createPlaceholderMessage,\n  setComponentRuleType,\n} from '../helper'\nimport { useItemLabWidth } from '../hooks/useLabelWidth'\n\nexport default defineComponent({\n  name: 'BasicFormItem',\n  inheritAttrs: false,\n  props: {\n    schema: {\n      type: Object,\n      default: () => ({}),\n    },\n    formProps: {\n      type: Object,\n      default: () => ({}),\n    },\n    allDefaultValues: {\n      type: Object,\n      default: () => ({}),\n    },\n    formModel: {\n      type: Object,\n      default: () => ({}),\n    },\n    setFormModel: {\n      type: Function,\n      default: null,\n    },\n    formActionType: {\n      type: Object,\n    },\n  },\n  setup(props, { slots }) {\n    const { schema, formProps } = toRefs(props)\n\n    const itemLabelWidthProp = useItemLabWidth(schema, formProps)\n\n    const getValues = computed(() => {\n      const { schema, formModel, allDefaultValues } = props\n      return {\n        field: schema.field,\n        schema,\n        model: formModel,\n        values: {\n          ...formModel,\n          ...allDefaultValues,\n        },\n      }\n    })\n\n    const getComponentsProps = computed(() => {\n      const { schema, formModel } = props\n      const { componentProps = {} } = schema\n      if (!isFunction(componentProps)) {\n        return componentProps\n      }\n      return componentProps({ schema, formModel }) ?? {}\n    })\n\n    function getShow() {\n      const { show, ifShow } = props.schema\n      let isShow = true\n      let isIfShow = true\n      if (isBoolean(show)) {\n        isShow = show\n      }\n      if (isBoolean(ifShow)) {\n        isIfShow = ifShow\n      }\n      if (isFunction(show)) {\n        isShow = show(unref(getValues))\n      }\n      if (isFunction(ifShow)) {\n        isIfShow = ifShow(unref(getValues))\n      }\n      return { isShow, isIfShow }\n    }\n\n    function handleRules() {\n      const {\n        rules: defRules = [],\n        component,\n        rulesMessageJoinLabel,\n        label,\n        dynamicRules,\n        required,\n      } = props.schema\n\n      if (isFunction(dynamicRules)) {\n        return dynamicRules(unref(getValues))\n      }\n\n      let rules = cloneDeep(defRules)\n      const { rulesMessageJoinLabel: globalRulesMessageJoinLabel = '' } =\n        props.formProps\n\n      const joinLabel = Reflect.has(props.schema, 'rulesMessageJoinLabel')\n        ? rulesMessageJoinLabel\n        : globalRulesMessageJoinLabel\n      const defaultMsg = `${createPlaceholderMessage(component)}${\n        joinLabel ? '' : label\n      }`\n\n      function validator(rule, value) {\n        const msg = rule.message || defaultMsg\n        if (value === undefined || isNull(value)) {\n          // 空值\n          return Promise.reject(msg)\n        } else if (Array.isArray(value) && value.length === 0) {\n          // 数组类型\n          return Promise.reject(msg)\n        } else if (typeof value === 'string' && value.trim() === '') {\n          // 空字符串\n          return Promise.reject(msg)\n        } else if (\n          typeof value === 'object' &&\n          Reflect.has(value, 'checked') &&\n          Reflect.has(value, 'halfChecked') &&\n          Array.isArray(value.checked) &&\n          Array.isArray(value.halfChecked) &&\n          value.checked.length === 0 &&\n          value.halfChecked.length === 0\n        ) {\n          // 非关联选择的tree组件\n          return Promise.reject(msg)\n        }\n        return Promise.resolve()\n      }\n\n      const getRequired = isFunction(required)\n        ? required(unref(getValues))\n        : required\n\n      if ((!rules || rules.length === 0) && getRequired) {\n        rules = [{ required: getRequired, validator }]\n      }\n\n      const requiredRuleIndex = rules.findIndex(\n        (rule) =>\n          Reflect.has(rule, 'required') && !Reflect.has(rule, 'validator')\n      )\n\n      if (requiredRuleIndex !== -1) {\n        const rule = rules[requiredRuleIndex]\n        const { isShow } = getShow()\n        if (!isShow) {\n          rule.required = false\n        }\n        if (component) {\n          if (!Reflect.has(rule, 'type')) {\n            rule.type = component === 'InputNumber' ? 'number' : 'string'\n          }\n\n          rule.message = rule.message || defaultMsg\n\n          if (component.includes('Input') || component.includes('Textarea')) {\n            rule.whitespace = true\n          }\n          const valueFormat = unref(getComponentsProps)?.valueFormat\n          setComponentRuleType(rule, component, valueFormat)\n        }\n      }\n      // 最大输入长度规则检查\n      const characterInx = rules.findIndex((val) => val.max)\n      if (characterInx !== -1 && !rules[characterInx].validator) {\n        rules[characterInx].message =\n          rules[characterInx].message ||\n          `字符数应小于${rules[characterInx].max}位`\n      }\n\n      return rules\n    }\n\n    // 在组件表中读取对应组件\n    function renderComponent() {\n      const { component, field, changeEvent = 'change' } = props.schema\n\n      const isCheck = component && ['Checkbox'].includes(component)\n\n      let eventKey = `on${upperFirst(changeEvent)}`\n\n      // 如果是 Input 组件，则将默认事件替换未 onInput 事件\n      if (['Input', 'Slider'].includes(component)) {\n        eventKey = 'onInput'\n      }\n\n      const on = {\n        [eventKey]: (...args) => {\n          const [e] = args\n          if (propsData[eventKey]) {\n            propsData[eventKey](...args)\n          }\n          const target = e ? e.target : null\n          const value = target ? (isCheck ? target.checked : target.value) : e\n          // console.log(field, value)\n          props.setFormModel(field, value)\n        },\n      }\n\n      const Comp = componentMap.get(component)\n      // console.log(Comp)\n      let propsData = {\n        ...unref(getComponentsProps),\n      }\n      if (!['ColorPicker'].includes(component)) {\n        propsData = Object.assign(propsData, { clearable: true })\n      }\n      // propsData.codeField = field\n      // propsData.formValues = unref(getValues)\n\n      // console.log(propsData)\n\n      const bindValue = {\n        [isCheck ? 'checked' : 'model-value']: handleFormItemValue(\n          props.schema,\n          props.formModel[field]\n        ),\n      }\n\n      // console.log(bindValue)\n\n      const compAttr = {\n        ...propsData,\n        ...on,\n        ...bindValue,\n      }\n\n      // 如果组件是 RadioGroup，并且参数中包含 options 属性，则需要生成子组件 Radio\n      if (\n        ['RadioGroup', 'CheckboxGroup', 'Select'].includes(component) &&\n        component &&\n        propsData.options &&\n        isArray(propsData.options)\n      ) {\n        const options = propsData.options\n        const getContent = (component, options) => {\n          return renderGroup(component, options)\n        }\n        return <Comp {...compAttr}>{getContent(component, options)}</Comp>\n      }\n\n      return <Comp {...compAttr}></Comp>\n    }\n\n    // 生成 RadioGroup/CheckboxGroup 的子组件\n    function renderGroup(component, options) {\n      if (component === 'Select') {\n        const CompItem = componentMap.get('Option')\n        return options.map((val) => {\n          return (\n            <CompItem\n              label={val.label}\n              key={val.value}\n              value={val.value}\n            ></CompItem>\n          )\n        })\n      } else {\n        const componentName = component.replace(/w*Group$/, '')\n        const CompItem = componentMap.get(componentName)\n        const CompList = options.map((val) => {\n          return <CompItem label={val.value}>{val.label}</CompItem>\n        })\n        return CompList\n      }\n    }\n\n    // 生成 formItem 组件\n    function renderItem() {\n      const { field, label, itemProps, slot } = props.schema\n      const { labelCol, wrapperCol } = unref(itemLabelWidthProp)\n\n      const getContent = () => {\n        return slot ? getSlot(slots, slot, unref(getValues)) : renderComponent()\n      }\n\n      return (\n        <ElFormItem\n          prop={field}\n          label={label}\n          {...itemProps}\n          {...wrapperCol}\n          labelWidth={labelCol}\n          rules={handleRules()}\n        >\n          <div style=\"display: flex;height: 100%;align-items: center;\">\n            <div style=\"flex: 1\">{getContent()}</div>\n          </div>\n        </ElFormItem>\n      )\n    }\n\n    return () => {\n      const { component, colProps = {} } = props.schema\n      if (!componentMap.has(component)) {\n        return null\n      }\n\n      const { baseColProps = {} } = props.formProps\n      const realColProps = { ...baseColProps, ...colProps }\n      // console.log(props.schema)\n      // const value = unref(getValues)\n      const { isIfShow, isShow } = getShow()\n\n      const getContent = () => {\n        return renderItem()\n      }\n\n      // console.log(getContent())\n\n      return (\n        isIfShow && (\n          <ElCol {...realColProps} v-show={isShow}>\n            {getContent()}\n          </ElCol>\n        )\n      )\n    }\n  },\n})\n</script>\n"],"names":["defineComponent","name","inheritAttrs","props","schema","type","Object","default","formProps","allDefaultValues","formModel","setFormModel","Function","formActionType","setup","slots","toRefs","itemLabelWidthProp","useItemLabWidth","getValues","computed","field","model","values","getComponentsProps","componentProps","isFunction","show","ifShow","isShow","isIfShow","isBoolean","unref","rules","defRules","component","rulesMessageJoinLabel","label","dynamicRules","required","cloneDeep","globalRulesMessageJoinLabel","joinLabel","Reflect","has","defaultMsg","createPlaceholderMessage","rule","value","msg","message","undefined","isNull","Promise","reject","Array","isArray","length","trim","checked","halfChecked","resolve","getRequired","validator","requiredRuleIndex","findIndex","getShow","includes","whitespace","valueFormat","setComponentRuleType","characterInx","val","max","changeEvent","isCheck","eventKey","upperFirst","on","args","e","propsData","target","Comp","componentMap","get","assign","clearable","bindValue","handleFormItemValue","compAttr","options","getContent","renderGroup","CompItem","map","componentName","replace","CompList","itemProps","slot","labelCol","wrapperCol","getSlot","renderComponent","handleRules","colProps","baseColProps","realColProps","renderItem"],"mappings":"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"}